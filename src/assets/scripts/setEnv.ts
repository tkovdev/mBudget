/* tslint:disable */
// @ts-nocheck
const { writeFile, existsSync, mkdirSync } = require('fs');
const { argv } = require('yargs');

require('dotenv').config();
const environment = argv.environment;

function writeFileUsingFS(targetPath, environmentFileContent) {
  writeFile(targetPath, environmentFileContent, function (err) {
    if (err) {
      console.log(err);
    }
    if (environmentFileContent !== '') {
      console.log(`wrote variables to ${targetPath}`);
    }
  });
}


// Providing path to the `environments` directory
const envDirectory = './src/environments';

// creates the `environments` directory if it does not exist
if (!existsSync(envDirectory)) {
  mkdirSync(envDirectory);
}

//creates the `environment.prod.ts` and `environment.ts` file if it does not exist
writeFileUsingFS('./src/environments/environment.ts', '');
writeFileUsingFS('./src/environments/environment.development.ts', '');


// Checks whether command line argument of `prod` was provided signifying production mode
const isProduction = environment === 'prod';

// choose the correct targetPath based on the environment chosen
const targetPath = isProduction
  ? './src/environments/environment.ts'
  : './src/environments/environment.development.ts';

//actual content to be compiled dynamically and pasted into respective environment files
const environmentFileContent = `
  // This file was autogenerated by dynamically running setEnv.ts and using dotenv for managing API key secrecy
  export const environment = {
    production: ${process.env.PRODUCTION},
    apiUrl: "${process.env.API_URL}",
    gapi: {
      clientId: "${process.env.GAPI_CLIENT_ID}",
      redirectUri: "${process.env.GAPI_REDIRECT_URI}"
    },
    firebase: {
      apiKey: "${process.env.FIREBASE_API_KEY}",
      authDomain: "${process.env.AUTH_DOMAIN}",
      databaseURL: "${process.env.DATABASE_URL}",
      projectId: "${process.env.PROJECT_ID}",
      storageBucket: "${process.env.STORAGE_BUCKET}",
      messagingSenderId: "${process.env.MESSAGING_SENDER_ID}",
      appId: "${process.env.APP_ID}",
      measurementId: "${process.env.MEASUREMENT_ID}"
    }
  }
`;

writeFileUsingFS(targetPath, environmentFileContent); // appending data into the target file

/* tslint:enable */
